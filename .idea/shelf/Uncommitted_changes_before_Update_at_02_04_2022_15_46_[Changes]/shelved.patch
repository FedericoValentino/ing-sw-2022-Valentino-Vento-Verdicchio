Index: src/main/java/model/boards/School.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.boards;\r\nimport model.boards.token.ColTow;\r\nimport model.boards.token.Student;\r\nimport model.boards.token.Col;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class School extends Board\r\n{\r\n  private final ColTow color;\r\n  private ArrayList<Student> entrance;\r\n  private int[] diningRoom;\r\n  private int[] roomCheckpoints;\r\n  private boolean[] professorTable;\r\n  private int towerCount;\r\n\r\n    public School(ColTow color, int towerCount)                     //Pouch viene dato in ingresso (dal controller suppongo) per estrarre tramite apposita\r\n    {                                                               //funzione gli studenti da metetre nell'entrance. Il colore della torre è dato per assegnare\r\n        this.color = color;                                         //la scuola a uno specifico team e il count delle torri va specificato in ingresso perchè cambiano\r\n        this.towerCount = towerCount;                               //da partite a 2/4 - 3 giocatori. Il resto è standard, array della dining room vuoto, professori a false\r\n        this.diningRoom = new int[5];\r\n        this.roomCheckpoints = new int[5];\r\n        this.professorTable = new boolean[5];\r\n        this.entrance = new ArrayList<Student>();\r\n    }\r\n\r\n\r\n  public void placeToken(Student student)             //Riceve un oggetto studente e una posizione specifica della entrance in cui metterlo;\r\n  {                                                                 //visto che usiamo arraylists per tutto non so wuanto serva dare la posizione.... può\r\n      entrance.add(student);                              //dare problemi e basterebbe fare una add. Comunque con l'attuale implementazione\r\n  }                                                                 //di placeToken va così\r\n\r\n\r\n  public Student extractStudent(int index)                          //Estrae un singolo studente dalla entrance e lo ritorna per la funzione che lo ha chiamato\r\n  {\r\n    try\r\n    {\r\n      Student student = entrance.get(index);\r\n      entrance.remove(index);\r\n      return student;\r\n    }\r\n    catch(NullPointerException e)\r\n    {\r\n      System.out.println(\"i can't give you correctly a specific position of student entrance, maybe because it's a null pointer\");\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public void placeInDiningRoom(int index)\r\n  {\r\n     Student student = extractStudent(index);\r\n     Col color = student.getColor();\r\n     diningRoom[color.ordinal()]++;\r\n  }\r\n\r\n  public void updateCheckpoint(int position)\r\n  {\r\n    roomCheckpoints[position] += 3;\r\n  }\r\n\r\n\r\n  public void updateTowerCount(int tower)\r\n  {towerCount += tower;}\r\n\r\n  public ArrayList<Student> getEntrance()\r\n    {return entrance;}\r\n\r\n  public ColTow getColor()\r\n  {\r\n    return color;\r\n  }\r\n\r\n  public int[] getDiningRoom()\r\n    {\r\n      return diningRoom;\r\n    }\r\n\r\n  public int[] getRoomCheckpoints()\r\n    {\r\n      return roomCheckpoints;\r\n    }\r\n\r\n  public boolean[] getProfessorTable()\r\n    {\r\n      return professorTable;\r\n    }\r\n\r\n  public int getTowerCount()\r\n    {\r\n      return towerCount;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/boards/School.java b/src/main/java/model/boards/School.java
--- a/src/main/java/model/boards/School.java	(revision 8cece4a4fb41f11dadffba745468843120e3a06a)
+++ b/src/main/java/model/boards/School.java	(date 1648907160336)
@@ -62,6 +62,10 @@
   public void updateTowerCount(int tower)
   {towerCount += tower;}
 
+  public void updateProfessorsTable(){            //da fare
+
+  }
+
   public ArrayList<Student> getEntrance()
     {return entrance;}
 
Index: src/main/java/model/cards/AssistantDeck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.cards;\r\n\r\nimport java.util.ArrayList;\r\n\r\n\r\npublic class AssistantDeck\r\n{\r\n    private ArrayList<AssistantCard> deck;\r\n    private final String playerName;\r\n    private final String wizard;\r\n\r\n    public AssistantDeck(String wizard, String playerName)      //crea nuovo deck, con ingresso wizard scelto dal player, e il player da assegnare\r\n    {\r\n        this.wizard = wizard;\r\n        this.playerName = playerName;\r\n        int j=1;\r\n        this.deck = new ArrayList<AssistantCard>();\r\n        for(int i = 1; i<=10; i++)\r\n            {\r\n                this.deck.add(new AssistantCard(j, i));     //il valore di movimento va da 1 a 5, quello del turno da 1 a 10\r\n                if((i % 2) == 0)                               // sono accoppiati sulle singole carte nel seguente modo (1,1 - 1,2 - 2,3 - 2,4 ecc)\r\n                    {                                          // dunque incremento j (relativo al movimento) solo quando i è pari\r\n                        j++;\r\n                    }\r\n\r\n            }\r\n    }\r\n\r\n    public boolean checkEmpty()         //checka se il deck è vuoto, può esser utile per controlli vittoria complessi..\r\n    {\r\n        return deck.isEmpty();\r\n    }\r\n\r\n    public AssistantCard extractCard(int index)     //estrae una carta dal deck e lo aggiorna\r\n    {\r\n        AssistantCard card = deck.get(index);\r\n        deck.remove(index);\r\n        return card;\r\n    }\r\n\r\n\r\n    public String getPlayerName()\r\n        {return playerName;}\r\n\r\n    public String getWizard()\r\n        {return wizard;}\r\n\r\n    public ArrayList<AssistantCard> getDeck()\r\n        {return deck;}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/cards/AssistantDeck.java b/src/main/java/model/cards/AssistantDeck.java
--- a/src/main/java/model/cards/AssistantDeck.java	(revision 8cece4a4fb41f11dadffba745468843120e3a06a)
+++ b/src/main/java/model/cards/AssistantDeck.java	(date 1648646641296)
@@ -48,4 +48,9 @@
     public ArrayList<AssistantCard> getDeck()
         {return deck;}
 
+    public AssistantCard getCard(int index)
+    {
+       return deck.get(index);
+    }
+
 }
